name: Matrix-Release-All
run-name:  Matrix Release All Models

on:
  workflow_dispatch:
    inputs:
      model:
        required: true
        description: Device Model
        type: choice
        default: JDC_Athena_immwrt
        options:
          - JDC_Arthur_immwrt
          - JDC_Athena_immwrt
          - JDC_Arthur_libwrt
          - JDC_Athena_libwrt
          - jdcloud_ipq60xx_immwrt
          - jdcloud_ipq60xx_libwrt
          - x64_immwrt
      runs-on:
        required: true
        description: Runs on...
        type: choice
        default: ubuntu-22.04
        options:
          - ubuntu-20.04
          - ubuntu-22.04

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ${{ inputs.runs-on }}
    strategy:
      matrix:
        device: ${{ fromJson(inputs.model) }}
    steps:
      - name: Maximize build space
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"
          remove-docker-images: "true"
          remove-large-packages: "true"
          remove-cached-tools: "true"
          remove-swapfile: "true"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo -E apt -yqq install dos2unix
          sudo -E apt -yqq install libfuse-dev
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E systemctl daemon-reload
          sudo -E timedatectl set-timezone "Asia/Shanghai"

      - name: Initialization Values
        run: |
          export BUILD_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          export BUILD_SRC=$(awk -F"=" '/REPO_URL/ {print $NF}' "./compilecfg/${{ matrix.device }}.ini")
          echo "BUILD_SRC=$BUILD_SRC" >> $GITHUB_ENV

      - name: Pre Clone
        run: ./pre_clone_action.sh ${{ matrix.device }}

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ./action_build/.ccache
            ./action_build/staging_dir
          key: ${{ inputs.runs-on }}-${{ hashFiles('**/repo_flag') }}-${{ env.BUILD_DATE }}-${{ matrix.device }}
          restore-keys: |
            ${{ inputs.runs-on }}-${{ hashFiles('**/repo_flag') }}-

      - name: Refresh the cache
        run: |
          if [ -d "./action_build/staging_dir" ]; then
            find "./action_build/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r dir; do
                find "$dir" -type f -exec touch {} +
            done
          fi

      - name: Build Firmware
        run: ./build.sh ${{ matrix.device }}

      - name: Get Kernel Verion
        run: |
          echo "KVER=$(find ./action_build/dl -maxdepth 1 -name "linux-[4-6]\.*" | sort -r | head -n 1 | grep -oE "[4-6]\.[0-9]{1,3}\.[0-9]{1,3}")" >> $GITHUB_ENV

      - name: Delete Old Cache
        run: |
          gh cache list --key ${{ inputs.runs-on }}-${{ hashFiles('**/repo_flag') }}- --json key --jq '.[] | .key' | while read -r key; do
            gh cache delete "$key"
          done
          echo "========cache status========"
          echo "ccache: $(du -sh ./action_build/.ccache | cut -f 1)"
          echo "staging: $(du -sh ./action_build/staging_dir | cut -f 1)"

      - name: Machine Information
        run: |
          echo "=============================================="
          lscpu | grep -E "name|Core|Thread"
          echo "=============================================="
          df -h
          echo "=============================================="

      - name: Package OpenWrt Firmware
        if: ${{ matrix.device == 'n1_immwrt' }}
        uses: unifreq/openwrt_packit@master
        env:
          OPENWRT_ARMVIRT: firmware/*.tar.gz
          PACKAGE_SOC: s905d
          KERNEL_VERSION_NAME: 6.6.y
          WHOAMI: Mary

      - name: Prepare Release Body
        run: |
          echo "云编译发布" > release_body.txt
          echo "源码：${{ env.BUILD_SRC }}" >> release_body.txt
          echo "Kernel: ${{ env.KVER }}" >> release_body.txt
          echo "设备型号: ${{ matrix.device }}" >> release_body.txt
          echo "亚瑟禁用USB.Docker.Coremark/雅典娜禁用Docker.Coremark" >> release_body.txt
          echo "Lucky手动替换/patches下同名文件" >> release_body.txt
          echo "ipq60xx和x64暂与zqinking相同未作改变" >> release_body.txt
          echo "WIFI密码: 12345678" >> release_body.txt
          echo "LAN地址: 192.168.111.1" >> release_body.txt
          echo "插件：" >> release_body.txt
          echo "$(grep -oP "luci-app(-[a-zA-Z0-9]{1,}){1,}" ./firmware/*.manifest | awk -F":" '{print $NF}')"  >> release_body.txt

      - name: Release Firmware
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.BUILD_DATE }}_${{ matrix.device }}
          files: ${{ matrix.device == 'n1_immwrt' && env.PACKAGED_OUTPUTPATH || './firmware' }}/*.*
          body_path: ./release_body.txt
